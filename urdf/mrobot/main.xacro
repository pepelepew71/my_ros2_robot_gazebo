<?xml version="1.0" encoding="utf-8"?>

<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:arg name="tf_odom_enabled" default="true" />
    <xacro:arg name="ns" default="" />

    <!-- Include -->
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/material.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/property.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/inertia.xacro" />

    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/wheel.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/caster.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/mrobot/plate.xacro" />

    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/accessory/lidar.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/accessory/imu.xacro" />
    <xacro:include filename="$(find my_ros2_robot_gazebo)/urdf/accessory/usb_camera.xacro" />

    <!-- Body of robot, with plates, standoffs and Create -->
    <!-- BASE-LINK -->
    <link name="$(arg ns)/base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder length="${base_link_length}" radius="${base_link_radius}"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder length="${base_link_length}" radius="${base_link_radius}"/>
            </geometry>
        </collision>
        <!-- warning: KDL does not support a root link with an inertia. -->
        <!-- <xacro:cylinder_inertial_matrix m="${base_mass}" r="${base_link_radius}" h="${base_link_length}" /> -->
        <inertial>
            <mass value="5.0"/>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
        </inertial>
    </link>

    <gazebo reference="$(arg ns)/base_link">
        <material>Gazebo/Blue</material>
    </gazebo>

    <!-- Wheel Definitions -->
    <xacro:wheel lr="right" translateY="-1" parent="$(arg ns)/base_link" ns="$(arg ns)" />
    <xacro:wheel lr="left" translateY="1" parent="$(arg ns)/base_link" ns="$(arg ns)" />

    <!-- Casters Definitions -->
    <xacro:caster fb="front"  translateX="1" parent="$(arg ns)/base_link" ns="$(arg ns)" />
    <xacro:caster fb="back"  translateX="-1" parent="$(arg ns)/base_link" ns="$(arg ns)" />

    <!-- plate Definitions -->
    <xacro:plate num="1" parent="$(arg ns)/base_link" ns="$(arg ns)" />
    <xacro:plate num="2" parent="$(arg ns)/plate_1_link" ns="$(arg ns)" />

    <!-- Attach the lidar -->
    <joint name="$(arg ns)/lidar_joint" type="fixed">
        <origin xyz="0 0 0.025" rpy="0 0 0" />
        <parent link="$(arg ns)/plate_2_link" />
        <child link="$(arg ns)/lidar_link" />
    </joint>

    <xacro:lidar ns="$(arg ns)" />

    <!-- Attach the IMU -->
    <joint name="$(arg ns)/imu_joint" type="fixed">
        <origin xyz="0 0 0.02" rpy="0 0 0" />
        <parent link="$(arg ns)/base_link" />
        <child link="$(arg ns)/imu_link" />
    </joint>

    <xacro:imu ns="$(arg ns)" />

    <!-- Attach the Camera -->
    <joint name="$(arg ns)/camera_joint" type="fixed">
        <origin xyz="0.12 0 0.1" rpy="0 0 0" />
        <parent link="$(arg ns)/base_link" />
        <child link="$(arg ns)/camera_link" />
    </joint>

    <xacro:usb_camera ns="$(arg ns)" />

    <!-- # joint state -->
    <gazebo>
        <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <ros>
                <remapping>~/out:=joint_states</remapping>
            </ros>
            <update_rate>30</update_rate>
            <joint_name>$(arg ns)/wheel_left_joint</joint_name>
            <joint_name>$(arg ns)/wheel_right_joint</joint_name>
        </plugin>
    </gazebo>

    <!-- # differential drive -->
    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>$(arg ns)/wheel_left_joint</left_joint>
            <right_joint>$(arg ns)/wheel_right_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>${base_link_radius*2}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>30</max_wheel_torque>
            <max_wheel_acceleration>1.8</max_wheel_acceleration>

            <!-- Receive velocity commands on this ROS topic -->
            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <!-- When false, publish no wheel odometry data to a ROS topic -->
            <publish_odom>true</publish_odom>

            <!-- When true, publish coordinate transform from odom to base_footprint -->
            <!-- I usually use the robot_localization package to publish this transform -->
            <publish_odom_tf>true</publish_odom_tf>

            <!-- When true, publish coordinate transform from base_link to the wheels -->
            <!-- The robot_state_publisher package is often used to publish this transform -->
            <publish_wheel_tf>false</publish_wheel_tf>

            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>

            <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
            <odometry_source>1</odometry_source>

            <!-- Change the ROS topic we will publish the odometry data to -->
            <ros>
                <!-- <remapping>odom:=wheel/odom</remapping> -->
            </ros>

        </plugin>
    </gazebo>

</robot>
